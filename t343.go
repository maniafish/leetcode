package main

import "math"

/*
给定一个正整数 n，将其拆分为至少两个正整数的和，并使这些整数的乘积最大化。 返回你可以获得的最大乘积。

示例 1:

输入: 2
输出: 1
解释: 2 = 1 + 1, 1 × 1 = 1。
示例 2:

输入: 10
输出: 36
解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36。
说明: 你可以假设 n 不小于 2 且不大于 58。
*/

/*
题解：
n	拆分	乘积
2	1+1		1	不拆分，2 比 1+1 更优
3	1+2		2	不拆分，3 比 1+2 更优
4	2+2		4	拆分，2 与 4 等价
5	2+3		6	拆分
6	3+3		9	拆分，3+3 比 2+2+2 更优
7	2+2+3	12	拆分，但不能拆成 1+3+3

所以拆分规则为拆分至3和2(优先拆成3)，如果最后有余数1，则把前一个3和余数1一起(3+1)拆分成(2+2)

注意：由于题目要求至少拆分成两个，所以对于2和3的情况也得拆分
*/

func integerBreak(n int) int {
	switch n {
	case 2:
		return 1
	case 3:
		return 2
	default:
		n3 := n / 3
		r := n % 3
		switch r {
		case 0:
			r = 1
		case 1:
			n3 -= 1
			r = 4
		}

		return int(math.Pow(3, float64(n3))) * r
	}
}
